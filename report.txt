Jahnabi Roy (2022CS11094), Abhinav Rajesh Shripad (2022CS11596)

COL333 ASSIGNMENT 1

The ASR (Automatic Speech Recognition) corrector has been implemented through a local beam search strategy, aiming to correct text outputs from ASR systems. Below are the key elements and core ideas implemented:

Core Algorithm :

- The Agent class is initialized with parameters including a phoneme table, vocabulary, beam width, maximum iterations, and a small threshold (`epsilon`) for improving costs.
- The phoneme_table helps map phonemes to possible substitutions, while vocabulary lists valid words for correction.
- The main task is to iteratively correct the initial ASR output to minimize the cost.

1. Hashing and Phoneme Mapping :
- The hash_word function creates a unique hash for each word using MD5, which helps in looking up words in word_file (contains all the words and their frequency counts in the form of a dictionary indexed by hashed value).
- The reverse_phoneme_table function creates a reverse mapping of phonemes for possible corrections, allowing each phoneme to map back to its potential original forms.

2. Search Functions :
- my_search: Identifies potential word corrections based on phoneme mappings by exploring possible substitutions.
- local_beam_search: Refines the search space to the most likely corrections using a beam width limit, considering word frequencies to prioritize common corrections.

3. Text Correction :
- replace_after : Applies regular expression replacements to correct common errors in the ASR output, such as replacing 'Z with 'S or 'D with ED.

4. Iterative Improvement :
- The algorithm uses a loop to iteratively test potential corrections, replacing words one at a time and recalculating the overall cost.
- Words are replaced with alternatives from local_beam_search, updating the best state whenever a lower-cost state is found.

5. Leading and Trailing Words Addition :
- Additional corrections involve adding leading or trailing words from the vocabulary, aiming to find configurations that reduce the sentence cost further. 

6. Cost Evaluation :
- compute_cost_lst : Computes the cost of a given list of words, evaluating how good a correction is based on the environment's cost function.

Core Ideas :
-  Beam Search Strategy: The core algorithm uses local beam search, focusing on a limited set of candidate solutions (words) at each step to avoid an exhaustive search.
-  Phoneme-Based Correction: Leveraging phoneme mappings allows the system to explore linguistically plausible corrections, enhancing accuracy.
-  Cost-Driven Iterative Refinement: By iteratively testing replacements and assessing costs, the approach ensures that only corrections that genuinely improve the ASR output are retained.
-  Hashing for Efficient Lookup: Hashing words enables quick checks against a predefined list of valid corrections, optimizing performance.

The above approach does not make any assumptions regarding the cost function, and is thus compatible to use with any other model as well. Reversing the phoneme table, and using the word_file dictionary gives the algorithm a better edge in realizing the best correction to minimize scores.
